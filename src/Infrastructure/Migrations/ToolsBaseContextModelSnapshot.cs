// <auto-generated />
using System;
using GitHubTools.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GitHubTools.Infrastructure.Migrations
{
    [DbContext(typeof(ToolsBaseContext))]
    partial class ToolsBaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("GitHubTools.Domain.Entities.OwnerDb", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("avatar_url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("events_url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("followers_url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("following_url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("gists_url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("gravatar_id")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("html_url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("node_id")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("organizations_url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("received_events_url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("repos_url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("site_admin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("starred_url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("subscriptions_url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("GitHubTools.Domain.Entities.RepositoryDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultBranch")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GitUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HtmlUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NodeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Parentid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("pushed_at")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Parentid");

                    b.ToTable("Repositories");
                });

            modelBuilder.Entity("GitHubTools.Domain.Entities.RepositoryDb", b =>
                {
                    b.HasOne("GitHubTools.Domain.Entities.OwnerDb", "Parent")
                        .WithMany("repositories")
                        .HasForeignKey("Parentid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("GitHubTools.Domain.Entities.OwnerDb", b =>
                {
                    b.Navigation("repositories");
                });
#pragma warning restore 612, 618
        }
    }
}
